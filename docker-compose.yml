x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  image: etl_pipeline_airflow
  restart: always

  # Reference all env vars from here:
  env_file:
    - .env

  environment:
    PYTHONPATH: /app
    AIRFLOW_HOME: "/app"
    AIRFLOW__CORE__DAGS_FOLDER: "/app/airflow/dags"
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__LOGGING_CONFIG_CLASS: config.airflow_local_settings.LOGGING_CONFIG
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

    AWS_REGION: ${S3_REGION}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

    # SMTP Alerts
    AIRFLOW__SMTP__SMTP_HOST: smtp.gmail.com
    AIRFLOW__SMTP__SMTP_STARTTLS: "True"
    AIRFLOW__SMTP__SMTP_SSL: "False"
    AIRFLOW__SMTP__SMTP_PORT: 587
    AIRFLOW__SMTP__SMTP_USER: ${ALERT_EMAILS}
    AIRFLOW__SMTP__SMTP_PASSWORD: ${ALERT_EMAIL_PASSWORD}
    AIRFLOW__SMTP__SMTP_MAIL_FROM: ${ALERT_EMAILS}

  volumes:
    - .:/app
  depends_on:
    db:
      condition: service_healthy
  networks:
    - etl_net
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "5"

services:
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: "webserver"
    ports:
      - "8080:8080"

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: "scheduler"

  fluentbit:
    container_name: fluentbit
    image: fluent/fluent-bit:2.2.2
    restart: always
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
    networks:
      - etl_net
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:2020/api/v1/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  db:
    container_name: postgres_db
    image: postgres:16
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

networks:
  etl_net:
